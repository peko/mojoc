section

  
  section
    h1 Mojo code style

  section
    h3 Basic Naming
    h4 The basic use #[b CamelCased]
    ul
      li this is #[b BigCamelCased]
      li this is #[b smallCamelCased].

  section
    h3 Variable Naming
    h4 The common variable use #[b smallCamelCased]
    +code_c.
      int               keyLength;
      int               valueTypeSize;
      SkeletonBone*     bone;
      SkeletonBoneData* boneData;
      Drawable*         drawable;

  section
    h4 The const use smallCamelCased
    +code_c.
      static const char*  ids[AudioId_Length];
      static const char*  saveDataFileName = "MojocSaveDataFile";
      static const int    bezierSize       = (BEZIER_SEGMENTS + 1) * 2 - 1;
      static const float  subDivPre        = subDivStep3 / pre5;

  section
    h4 The bool variable (including member variables) begin with prefix #[b is], then the whole is smallCamelCased
    +code_c.
      SLboolean isLoopEnabled;
      bool      isFound;
      bool      isRemoved;
      particle->isActive

  section
    h4 The singleton variable begin with prefix A, then the whole is BigCamelCased
    +code_c.
      extern struct AComponent   AComponent  [1];
      extern struct ADrawable    ADrawable   [1];
      extern struct AParticle    AParticle   [1];
      extern struct AApplication AApplication[1];

  section
    h4 The variable of function get out argument begin with prefix out, then the whole is smallCamelCased
    +code_c.
      void (*OnSaveData)(void**   outSaveData,   int*         outLength);
      void (*Inverse)   (Matrix4* matrix4,       Matrix4*     outInverse);
      void Init         (int      valueTypeSize, ArrayIntMap* outArrayIntMap);

  section
    h4 The variable of function pointer use BigCamelCased
    +code_c.
      typedef struct
      {
          void (*OnPause)  (void);
          void (*OnResume) (void);
          void (*OnDestroy)(void);
      }
      ApplicationCallbacks;

  section
    +code_c.
      typedef float (*TweenActionValueOnGet)(void* target);
      typedef void  (*TweenActionValueOnSet)(void* target, float value);

      typedef struct
      {
          TweenActionValueOnGet OnGet;
          TweenActionValueOnSet OnSet;
      }
      TweenActionValueGetSet;

  section
    h3 Abbreviated Naming
    h4 The abbreviated words use uppercase words or lowercase words
    +code_c.
      typedef struct { } RGB;

      RGB rgb;
      RGB myRGB;
      RGB rgbDatas[10];
      RGB myRGBData;

      void SetRGB    (RGB* rgb);
      void RGBSet    (RGB* rgb);
      void SetRGBData(RGB* rgb);

  section
    h2 Goto Label Naming
  section
    h4 The goto label tag use #[b BigCamelCased]. But goto label address use common variable rule
    +code_c.
      goto ParseArrayEnd;
      goto ParseObjectEnd;
      goto UseVBO;
      goto UseVAO;
      goto *coroutine->step;

  section
    h2 Enum Naming
  section
    h4 The enum use #[b BigCamelCased], and must have prefix separated by #[b _]
    +code_c.
      enum
      {
          HeroState_Stand,
          HeroState_DieOver,
      };

      enum
      {
          CollisionGroup_HeroBody   = 1,
          CollisionGroup_HeroAttack = 1 << 1,
      };
      

  section
    h4 The typedef enum use #[b BigCamelCased], and must have prefix separated by #[b _]
    +code_c.
      typedef enum
      {
          FontTextAlignment_HorizontalLeft,
          FontTextAlignment_HorizontalRight,
          FontTextAlignment_VerticalTop,
          FontTextAlignment_VerticalBottom,
      }
      FontTextAlignment;

  section
    +code_c.
      typedef enum
      {
          InputTouchType_Up     = 1,
          InputTouchType_Down   = 2,
          InputTouchType_Move   = 3,
          InputTouchType_Cancel = 4,
      }
      InputTouchType;

  section
    h2 Function Naming
  section
    h4 The global function and global inline function use #[b BigCamelCased], and must have prefix separated by #[b _]
    +code_c.
      extern void         Application_Main        (void);
      static inline void  AApplication_AppendChild(Component* child);
      static inline float AGLTool_ToGLWidth       (float      screenWidth);
      static inline float AMath_Random            (void);
     
  section
    h4 The local function and local inline function use #[b BigCamelCased];
    +code_c.
      static void         LoadingRun    (Coroutine* coroutine);
      static inline float GetWorldScaleY(Drawable*  drawable);
     
  section
    h4 The typedef function use #[b BigCamelCased], and must have prefix
    +code_c.
      typedef float (*TweenActionValueOnGet)(void*      target);
      typedef void  (*TweenActionValueOnSet)(void*      target, float value);
      typedef void  (*CoroutineRun)         (Coroutine* coroutine);
     
  section
    h4 The function operation may not succeed, begin with prefix #[b Try], then the whole is #[b BigCamelCased]
    +code_c.
      void* (*TryPut)   (ArrayIntMap* arrayIntMap, intptr_t key, void* valuePtr);
      bool  (*TryRemove)(ArrayIntMap* arrayIntMap, intptr_t key);
     
  section
    h4 The function return boolean which is operation purpose, begin with prefix #[b Is] or #[b Test] or #[b Check] , then the whole is #[b BigCamelCased]
    +code_c.
      bool (*IsContains)         (ArrayIntSet*  arrayIntSet, intptr_t element);
      bool (*TestPolygonPoint)   (Array(float)* vertexArr,   float x, float y);
      bool ADrawable_CheckVisible(Drawable*     drawable);
     
  section
    h4 The function begin with prefix #[b Release], means free the struct members memory, after then the pointer needs to be freed manually
    +code_c.
      void (*Release)    (Mesh* mesh);
      void (*ReleaseQuad)(DrawAtlas* drawAtlas, SubMesh* subMesh);
     
  section
    h4 The function begin with the prefix #[b Destroy], means free the struct members and self memory, after then the pointer cannot be used
    +code_c.
      void (*Destroy)(void);
      void (*Destroy)(Texture* texture);

  section
    h4 The function begin with prefix #[b Create], means return the malloc pointer, so use #[b Release] and #[b free] or #[b Destroy] for delete
    +code_c.
      ArrayList* (*Create)            (int elementTypeSize);
      ArrayList* (*CreateWithSize)    (int elementTypeSize, int size);
      ArrayList* (*CreateWithCapacity)(int elementTypeSize, int capacity);

  section
    h4 The function begin with prefix #[b Init], means the pointer members memory on stack, so use #[b Release] or #[b Destroy] for delete memory
    +code_c.
      void (*Init)            (int elementTypeSize, ArrayList*               outArrayList);
      void (*InitWithSize)    (int elementTypeSize, int size,     ArrayList* outArrayList);
      void (*InitWithCapacity)(int elementTypeSize, int capacity, ArrayList* outArrayList);

  section
    h4 The function if no args then type #[b void] arg
    +code_c.
      Drawable*          (*Create)      (void);
      int                (*GetDrawCalls)(void);
      struct ATweenTool* (*AddAction)   (void);

  section
    h4 The function have suffix #[b Impl], means the function must be implemented in #[b .c] file
    +code_c.
      extern void Application_MainImpl(void);

      struct ATweenActionValueGetSetImpl
      {
          TweenActionValueGetSet moveX  [1];
          TweenActionValueGetSet moveY  [1];

          TweenActionValueGetSet scaleX [1];
          TweenActionValueGetSet scaleY [1];

          TweenActionValueGetSet rotateZ[1];
          TweenActionValueGetSet fadeTo [1];
      };

      extern struct ATweenActionValueGetSetImpl ATweenActionValueGetSetImpl[1];

  section
    h2 Struct Naming

    h4 The struct (union) or typedef struct (union), use #[b BigCamelCased]

  section
    h2 Macro Naming

  section
    h4 The head define macro, use #[b uppercase] words separated by #[b _] and have suffix #[b H]
    +code_c.
      #ifndef STYLE_GUIDE_H
      #define STYLE_GUIDE_H
  
  section
    h4 The macro without parameters, use #[b uppercase] words separated by #[b _]
    +code_c.
      #define MATH_PI  3.141592653589793
      #define MATH_2PI 6.283185307179586
      #define MATH_PI2 1.570796326794897

  section
    h4 The macro with parameters, use #[b BigCamelCased], and must have prefix separated by #[b _]
    +code_c.
      #define AMath_Min(x, y) 
      #define AStruct_GetParent2(memberPtr, structType)
      #define ACoroutine_YieldFrames(waitFrames)
      
  section
    h4 The local macro in #[b .c] file, use #[b BigCamelCased], no prefix required, and must #[b #undef] in same #[b .c] file
    +code_c.
      #define CheckIndex(tag, index)
      #define CheckCallback(callback)
      #define CheckFingerId(tag, fingerId)

      #undef CheckIndex
      #undef CheckCallback
      #undef CheckFingerId
      
  section
    h4 The macro type parameter must have suffix #[b Type]
    +code_c.
      #define ArrayList(ElementType)
      #define AArrayIntSet_Init(ElementType, increase)
      #define AArrayList_Pop(arrayList, ElementType)
  
  section
    h2 Array Naming

  section
    h4 Array as parameter, use #[b []] form, not #[b *] form
    +code_c.
      void (*SetTimeToBuff)(char        buff  [], int seconds);
      int  (*BinarySearch) (const float values[], int valuesLength, float target);

  section
    h4 Array as parameter, use #[b [length]] form, if the length is clear
    +code_c.
      void (*GetLanguageCode)(char outLanguageCode[2]);

  section
    h4 Array variable use #[b [length]] form, if the length is clear
    +code_c.
      extern struct AMesh AMesh[1];
        
      struct AGLInfo
      {
          GLfloat pointSizeRange[2];
          GLfloat lineWidthRange[2];
      }

      ArrayIntSet set[1] = AArrayIntSet_Init(ElementType, increase);

  section
    h4 Array composite literal use #[b [length]] form, if the length is clear
    +code_c.
      #define AColor_Make(r, g, b, a) (Color[1])   {{r, g, b, a }}
      #define AMatrix_Make(...)       (Matrix4[1]) {{__VA_ARGS__}}
      InitSprite(outSprite, texture, (Array(Quad)[1]) {quad, 1}); 

  section
    h2 Others Naming

  section
    h4 The following cases use #[b BigCamelCased]
    ul
      li File Name
      li Folder Name
      li Resource Name

  section
    h2 Basic Format

  section
    h4 Use #[b 4 spaces] key indent, not #[b tab] key
    h4 One line #[b 120 chars]
    h4 The pointer #[b *] on type name side
    +code_c.
      int*  p1;
      int** p2 = &p1;
      void* Function(char* str);
      
    h4 In code block try #[b vertical] alignment
    +code_c.
      See all the examples above.
      
  section
    h2 Space Format

    h4 The operator at least #[b one space] on both sides
    +code_c.
      vertexX + (y - vertexY) / (preY - vertexY) * (preX - vertexX)

  section
    h4 The #[b if, while, for, switch], must have #[b {}], and #[b one space] with #[b ()]
    +code_c.
      if (...)
      {
      }
      

      while (...)
      {
      }


      for (...)
      {
      }


      switch (...)
      {
      }
      

  section
    h2 Indent Format

    h4 The case #[b 4 spaces] indent, and the break #[b 4 spaces] indent in switch case
    +code_c.
      switch (...)
      {
          case 0:
              break;

          case 1:
          {
              break;
          }
      }
      

  section
    h4 The goto label indent with the current line
    +code_c.
      static void Function()
      { 
           goto Label:

           Label1:
           int a;

           Label2:
           int b;

           Label3:
           int c;
      }
  
  section
    h4 The conditional compile, indent with the current line
    +code_c.
      typedef struct
      {
           Sprite       sprite[1];
           PhysicsBody* body;
           Enemy*       enemy;
           ArrowHitType hitType;

           #ifdef APP_DEBUG
           Drawable     debugDrawable[1];
           #endif
      }
      Arrow;

      void Function()
      {
          int a;
            
          #ifdef APP_DEBUG
          int b;
          #endif
      }

      #ifdef APP_DEBUG
      Drawable debugDrawable[1];
      #endif
      

  section
    h2 Parentheses Format

    h4 The #[b {}] and #[b {{}}] vertical alignment or on the same line
    +code_c.
      {
        ...
      }  // vertical alignment
      
        
      {{
        ...
      }} // vertical alignment 


      {...} // same line
      

      {{...}} // same line

  section
    h4 The #[b {{}}] used for array init
    +code_c.
      struct AGameMap AGameMap[1] =
      {{
          .Init      = Init,
          .Run       = Run,
          .RandomMap = RandomMap,
      }};

      Vector3 vector[1] =
      {{
          drawable->modelMatrix->m0,
          drawable->modelMatrix->m1,
          drawable->modelMatrix->m2,
      }};

      #define AMatrix_Make(...) (Matrix4[1]) {{__VA_ARGS__}}

  section
    h4 The #[b ()] if need to wrap, then vertical alignment
    +code_c.
      AMath_Max
      (
          animationData->duration,
          AArray_Get
          (
              deformTimeline->frameArr,
              deformTimeline->frameArr->length - 1,
              float
          )
      );

      static void ReadAnimationDeform
      (
          SkeletonData*          skeletonData,
          JsonObject*            jsonDeform,
          SkeletonAnimationData* animationData,
          ArrayList*             skeletonTimelineArr
      )
      {
      }

  section
    h2 Lines Format

  section
    h4 Empty #[b two lines] around functions
    +code_c.
      static int a = 100;

      static void Function1()
      {
      }

      static inline void Function2()
      {
      }

      struct A
      {
      }
      
  section
    h4 Empty #[b two lines] between different contents
    +code_c.
      #include "AAA.h"
      #include "BBB.h"

      typedef float (*Function1)(void* target);
      typedef float (*Function2)();

      struct A
      {
      }

      struct B
      {
      }

      extern struct B B[1];

  section
    h2 Code Comment

  section
    h4 Outside function body use #[b /***/]
    +code_c.
      /**
       * Comment struct
       */  
      struct A
      {   
          /**
           * Comment property
           */ 
          int a;
          
          /**
           * Comment function
           */
          void (*Function)();
      }
      
  section
    h4 In function body use #[b //]
    +code_c.
      void Function()
      {
        // comment in function body.
      } 

  section
    h4 Comment block or multiline code
    +code_c.
      /* This is means comment block or multiline code. */

      /* 
      This is means comment block or multiline code. 
      */

  section
    h4 Use comment line to separate different logical related contents
    +code_c.
      void Function1();

      //--------------------

      void Function2();

      void Function3()
      {
          int a;

          //---------------- 

          int b;
      }

  section
    h4 Use comment line to mark macros #[b #ifdef Platform_X] or multiple #[b #endif]
    +code_c.
      #ifndef PLATFORM_H
      #define PLATFORM_H

      //------------------------
      #ifdef IS_PLATFORM_ANDROID
      //------------------------

      // platform codes.

      //---------------------------
      #endif // IS_PLATFORM_ANDROID
      //---------------------------

      //------------------
      #endif // PLATFORM_H
      //------------------

  section
    h2 Other Rules
      
  section
    h4 The parameter macro, used only when #[b inline] function not working
    h4 such as shortcut parameters of function call.
      +code_c.
        /**
         * Shortcut of AArrayList->GetAdd.
         * return element.
         */
         #define AArrayList_GetAdd(arrayList, ElementType) \ 
         (*(ElementType*) AArrayList->GetAdd(arrayList))

  section  
    h4 such as macro specific functionality.
      +code_c.
        #define CheckIndex(tag, index)                                      \
        ALog_A                                                              \
        (                                                                   \
            ((index) < arrayList->size && (index) >= 0),                    \
            "AArrayList " tag " failed index error, index = %d, size = %d", \
            index,                                                          \
            arrayList->size                                                 \
        )     
        
  section
    h4 such as generic parameter.
      +code_c.
        /**
         * Marked ArrayList element type.
         * ElementType: element data type
         */
        #define ArrayList(ElementType) ArrayList
        
  section
    h4 such as varargs.
      +code_c.
        #define ALog_A(e, ...) e ? (void) 0 : ALog_E(__VA_ARGS__),  assert(e);
        
  section
    h4 Do not use number as #[b boolean] value
    h4 The #[b coefficient] number uses #[b int] unless it is a #[b float]
    +code_c.
      float f1 = sprite->width / 2;
      float f2 = sprite->width / 2.5f;

  section
    h4 Use #[b ++i] whenever possible
    +code_c.
      for (int i = 0; i < 10; ++i)
      {
      }

  section       
    h4 Assignment appears in the #[b if] or #[b while] statement, adding brackets
    +code_c.
      int intVal;
      if ((intVal = GetInt())) 
      {
          int tmp = intVal * 100;
      }

      int intVal1;
      int intVal2 = GetInt();
      while ((intVal1 = intVal2))
      {
          int tmp = intVal1 * 100;
      }

  section
    h4 The #[b const] variable cannot be modified
    h4 Use #[b enum] instead of macro #[b #define] whenever possible
    h4 Use a monospaced font

